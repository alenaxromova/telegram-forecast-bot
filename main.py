from flask import Flask, request, jsonify, send_from_directory
from openai import OpenAI
import os
import random
import datetime
import pytz
import requests

app = Flask(__name__)

# üîê –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ OpenAI
client = OpenAI(api_key=os.environ.get("OPENAI_API_KEY"))

# ‚ú® –ë–∞–∑–æ–≤—ã–µ —Ç–µ–∫—Å—Ç—ã –ø–æ —á–∏—Å–ª–∞–º (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å —Å–≤–æ–∏–º–∏)
base_texts = {
    1: "–°–µ–≥–æ–¥–Ω—è —Ç—ã –ª–∏–¥–µ—Ä. –ù–µ –±–æ–π—Å—è –±—Ä–∞—Ç—å –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—É –Ω–∞ —Å–µ–±—è.",
    2: "–î–µ–Ω—å –ø–∞—Ä—Ç–Ω—ë—Ä—Å—Ç–≤–∞ –∏ –≥–∞—Ä–º–æ–Ω–∏–∏. –û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –±–∞–ª–∞–Ω—Å –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö.",
    3: "–î–µ–Ω—å —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞ –∏ –æ–±—â–µ–Ω–∏—è. –î–µ–ª–∏—Å—å —Ä–∞–¥–æ—Å—Ç—å—é —Å –¥—Ä—É–≥–∏–º–∏.",
    # ... –¥–æ–±–∞–≤—å –≤—Å–µ 22 —Ç–µ–∫—Å—Ç–∞ –ø–æ —á–∏—Å–ª–∞–º
}

# üñº –ó–∞–≥–ª—É—à–∫–∏-–∫–∞—Ä—Ç–∏–Ω–∫–∏ –ø–æ —á–∏—Å–ª–∞–º
images = {
    1: [
        "https://via.placeholder.com/300x200.png?text=1A",
        "https://via.placeholder.com/300x200.png?text=1B"
    ],
    2: [
        "https://via.placeholder.com/300x200.png?text=2A",
        "https://via.placeholder.com/300x200.png?text=2B"
    ],
    # ... –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
}

def calculate_number_by_date(date):
    total = sum(int(c) for c in date.strftime("%d%m%Y"))
    while total > 22:
        total = sum(int(c) for c in str(total))
    return total

@app.route('/')
def index():
    return send_from_directory('.', 'index.html')

@app.route('/auth.html')
def auth_html():
    return send_from_directory('.', 'auth.html')

@app.route('/today')
def today_forecast():
    tz = request.args.get('tz', 'UTC')
    try:
        user_tz = pytz.timezone(tz)
    except:
        user_tz = pytz.UTC

    now = datetime.datetime.now(user_tz)
    date_str = now.strftime("%Y-%m-%d")
    number = calculate_number_by_date(now)

    base_text = base_texts.get(number, "–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –¥–µ–Ω—å. –ñ–∏–≤–∏ —Å–ø–æ–∫–æ–π–Ω–æ.")
    image_url = random.choice(images.get(number, ["https://via.placeholder.com/300x200.png?text=Default"]))

    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã –º–∞–≥–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫. –†–∞—Å—à–∏—Ä—å –∏ —É–∫—Ä–∞—Å—å —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç, –Ω–µ –¥–æ–±–∞–≤–ª—è—è –Ω–æ–≤—ã—Ö —Å–º—ã—Å–ª–æ–≤."},
                {"role": "user", "content": base_text}
            ]
        )
        final_text = response.choices[0].message.content.strip()
    except Exception as e:
        final_text = f"[–û—à–∏–±–∫–∞ OpenAI] {str(e)}"

    return jsonify({
        "date": date_str,
        "number": number,
        "image": image_url,
        "text": final_text
    })

# === üì© Telegram Webhook ===
TELEGRAM_BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")

@app.route('/webhook', methods=['POST'])
def telegram_webhook():
    data = request.get_json()

    if 'message' in data and data['message'].get('text') == '/start':
        chat_id = data['message']['chat']['id']
        send_button(chat_id)

    return jsonify(ok=True)

def send_button(chat_id):
    webapp_url = "https://telegram-forecast-bot.onrender.com/"
    message = "‚ú® –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:"
    payload = {
        "chat_id": chat_id,
        "text": message,
        "reply_markup": {
            "inline_keyboard": [[
                {
                    "text": "üîÆ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑",
                    "web_app": {
                        "url": webapp_url
                    }
                }
            ]]
        }
    }
    requests.post(
        f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage",
        json=payload
    )

if __name__ == '__main__':
    port = int(os.environ.get("PORT", 5000))
    app.run(host='0.0.0.0', port=port)

