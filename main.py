from flask import Flask, render_template_string
import random
import datetime
import openai
import os

app = Flask(__name__)

# üîê –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ OpenAI
openai.api_key = os.getenv("OPENAI_API_KEY")  # –í—Ä–µ–º–µ–Ω–Ω–æ

# üìÑ –ë–∞–∑–æ–≤—ã–µ —Ç–µ–∫—Å—Ç—ã –ø–æ —á–∏—Å–ª–∞–º
base_texts = {
    18: "–°–µ–≥–æ–¥–Ω—è —Ç—ã –ª–∏–¥–µ—Ä. –ù–µ –±–æ–π—Å—è –±—Ä–∞—Ç—å –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—É –Ω–∞ —Å–µ–±—è.",
    2: "–î–µ–Ω—å –ø–∞—Ä—Ç–Ω—ë—Ä—Å—Ç–≤–∞ –∏ –≥–∞—Ä–º–æ–Ω–∏–∏. –û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –±–∞–ª–∞–Ω—Å –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö.",
    3: "–î–µ–Ω—å —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞ –∏ –æ–±—â–µ–Ω–∏—è. –î–µ–ª–∏—Å—å —Ä–∞–¥–æ—Å—Ç—å—é —Å –¥—Ä—É–≥–∏–º–∏.",
    2: "–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –¥–µ–Ω—å. –ñ–∏–≤–∏ —Å–ø–æ–∫–æ–π–Ω–æ –∏ –Ω–∞–±–ª—é–¥–∞–π –∑–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—â–∏–º."
}

# üñº –ó–∞–≥–ª—É—à–∫–∏-–∫–∞—Ä—Ç–∏–Ω–∫–∏ –ø–æ —á–∏—Å–ª–∞–º
images = {
    1: ["https://via.placeholder.com/300x200.png?text=1-A", "https://via.placeholder.com/300x200.png?text=1-B"],
    2: ["https://via.placeholder.com/300x200.png?text=2-A"],
    3: ["https://via.placeholder.com/300x200.png?text=3-A", "https://via.placeholder.com/300x200.png?text=3-B"],
    18: ["https://via.placeholder.com/300x200.png?text=Default"]
}

def calculate_number_by_date(date):
    total = sum(int(c) for c in date.strftime("%d%m%Y"))
    while total > 22:
        total = sum(int(c) for c in str(total))
    return total

@app.route("/today")
def today_forecast():
    today = datetime.date.today()
    number = calculate_number_by_date(today)

    base_text = base_texts.get(number, "–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –¥–µ–Ω—å. –ñ–∏–≤–∏ —Å–ø–æ–∫–æ–π–Ω–æ.")
    image_url = random.choice(images.get(number, ["https://via.placeholder.com/300x200.png?text=Default"]))

    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã –º–∞–≥–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫. –†–∞—Å—à–∏—Ä—å –∏ —É–∫—Ä–∞—Å—å —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç, –Ω–µ –¥–æ–±–∞–≤–ª—è—è –Ω–æ–≤—ã—Ö —Å–º—ã—Å–ª–æ–≤."},
                {"role": "user", "content": base_text}
            ]
        )
        final_text = response.choices[0].message.content.strip()
    except Exception as e:
        final_text = f"[–û—à–∏–±–∫–∞ OpenAI] {str(e)}"

    html_template = f"""
    <html>
    <head><title>–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è</title></head>
    <body style='font-family: Arial; padding: 20px;'>
        <h1>–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {today.strftime('%d.%m.%Y')}</h1>
        <img src="{image_url}" alt="–ö–∞—Ä—Ç–∏–Ω–∫–∞ –¥–Ω—è"><br><br>
        <p><strong>–ß–∏—Å–ª–æ –¥–Ω—è:</strong> {number}</p>
        <p>{final_text}</p>
    </body>
    </html>
    """
    return render_template_string(html_template)

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=3000)