from flask import Flask, jsonify, request
from datetime import datetime
from openai import OpenAI
import os
import random
import pytz

app = Flask(__name__)

# üîê OpenAI –∫–ª–∏–µ–Ω—Ç
client = OpenAI(api_key=os.environ.get("OPENAI_API_KEY"))

# –ë–∞–∑–æ–≤—ã–µ —Ç–µ–∫—Å—Ç—ã –ø–æ —á–∏—Å–ª–∞–º (–¥–æ–±–∞–≤—å —Å–≤–æ–∏ –ø–æ–∑–∂–µ)
base_texts = {
    1: "–¢—ã ‚Äî –ª–∏–¥–µ—Ä. –î–µ–π—Å—Ç–≤—É–π —Å–º–µ–ª–æ.",
    2: "–°–ª—É—à–∞–π –∏ –±—É–¥—å –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–º.",
    3: "–ü—É—Å—Ç—å —Å–µ–≥–æ–¥–Ω—è –±—É–¥–µ—Ç —è—Ä–∫–∏–º!",
    4: "–°–æ—Ö—Ä–∞–Ω—è–π —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å ‚Äî —Ç—ã –∫–∞–∫ —Å–∫–∞–ª–∞.",
    5: "–î–µ–Ω—å –ø–µ—Ä–µ–º–µ–Ω. –û—Ç–∫—Ä–æ–π—Å—è –Ω–æ–≤–æ–º—É.",
    6: "–ü–æ–∑–∞–±–æ—Ç—å—Å—è –æ –±–ª–∏–∑–∫–∏—Ö. –ò –æ —Å–µ–±–µ.",
    7: "–û—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å –¥–ª—è —É—á—ë–±—ã –∏ —É–µ–¥–∏–Ω–µ–Ω–∏—è.",
    8: "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –¥–µ–Ω—å. –ë—É–¥—å —á–µ—Å—Ç–µ–Ω –∏ —Ç–æ—á–µ–Ω.",
    9: "–ü–æ—Ä–∞ –ø–æ–¥–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥–∏. –ò–¥—ë—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ü–∏–∫–ª–∞.",
}

# –ö–∞—Ä—Ç–∏–Ω–∫–∏ –ø–æ —á–∏—Å–ª–∞–º (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∏)
images = {
    1: ["https://via.placeholder.com/300x200.png?text=1A", "https://via.placeholder.com/300x200.png?text=1B"],
    2: ["https://via.placeholder.com/300x200.png?text=2A"],
    3: ["https://via.placeholder.com/300x200.png?text=3A"],
    4: ["https://via.placeholder.com/300x200.png?text=4A"],
    5: ["https://via.placeholder.com/300x200.png?text=5A"],
    6: ["https://via.placeholder.com/300x200.png?text=6A"],
    7: ["https://via.placeholder.com/300x200.png?text=7A"],
    8: ["https://via.placeholder.com/300x200.png?text=8A"],
    9: ["https://via.placeholder.com/300x200.png?text=9A"],
}

# üî¢ –†–∞—Å—á—ë—Ç —á–∏—Å–ª–∞ –∏–∑ –¥–∞—Ç—ã
def calculate_number_by_date(date):
    total = sum(int(c) for c in date.strftime("%d%m%Y"))
    while total > 22:
        total = sum(int(c) for c in str(total))
    return total if total in base_texts else 1

@app.route("/today")
def today_forecast():
    # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    tz_name = request.args.get("tz", "UTC")
    try:
        user_tz = pytz.timezone(tz_name)
    except Exception:
        user_tz = pytz.UTC

    now = datetime.now(user_tz)
    number = calculate_number_by_date(now)
    base_text = base_texts.get(number, "–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –¥–µ–Ω—å.")
    image_url = random.choice(images.get(number, ["https://via.placeholder.com/300x200.png?text=Default"]))

    # –ó–∞–ø—Ä–æ—Å –∫ OpenAI
    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã –º–∞–≥–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫. –†–∞—Å—à–∏—Ä—å –∏ —É–∫—Ä–∞—Å—å —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç, –Ω–µ –¥–æ–±–∞–≤–ª—è—è –Ω–æ–≤—ã—Ö —Å–º—ã—Å–ª–æ–≤."},
                {"role": "user", "content": base_text}
            ]
        )
        final_text = response.choices[0].message.content.strip()
    except Exception as e:
        final_text = f"[–û—à–∏–±–∫–∞ OpenAI] {str(e)}"

    return jsonify({
        "date": now.strftime("%Y-%m-%d"),
        "number": number,
        "text": final_text,
        "image": image_url
    })

# üü¢ –ó–∞–ø—É—Å–∫ –¥–ª—è Render
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
